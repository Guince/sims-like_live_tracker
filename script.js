console.log('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Vibe Coding!'); 

// --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ---
const habitModal = document.getElementById('habitModal');
const habitForm = document.getElementById('habitForm');
const habitNameInput = document.getElementById('habitName');
const habitIdInput = document.getElementById('habitId');
const modalTitle = document.getElementById('modalTitle');
const closeModalBtn = document.getElementById('closeModal');
const addHabitBtn = document.getElementById('addHabitBtn');
const habitsList = document.getElementById('habitsList');

// --- –î–∞–Ω–Ω—ã–µ ---
const STORAGE_KEY = 'habits';
let habits = [];

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function saveHabits() {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(habits));
}

function loadHabits() {
    const data = localStorage.getItem(STORAGE_KEY);
    habits = data ? JSON.parse(data) : [];
}

function generateId() {
    return '_' + Math.random().toString(36).substr(2, 9);
}

function getToday() {
    const d = new Date();
    d.setHours(0,0,0,0);
    return d;
}

function sameDay(d1, d2) {
    return d1.getFullYear() === d2.getFullYear() &&
           d1.getMonth() === d2.getMonth() &&
           d1.getDate() === d2.getDate();
}

// --- UI ---
function openModal(edit = false, habit = null) {
    habitModal.classList.remove('hidden');
    if (edit && habit) {
        modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É';
        habitNameInput.value = habit.name;
        habitIdInput.value = habit.id;
    } else {
        modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É';
        habitNameInput.value = '';
        habitIdInput.value = '';
    }
    habitNameInput.focus();
}

function closeModal() {
    habitModal.classList.add('hidden');
}

function renderHabits() {
    habitsList.innerHTML = '';
    if (habits.length === 0) {
        habitsList.innerHTML = '<li style="text-align:center;color:#888;">–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é!</li>';
        return;
    }
    habits.forEach(habit => {
        const li = document.createElement('li');
        li.className = 'habit-item';
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è
        const header = document.createElement('div');
        header.className = 'habit-header';
        const title = document.createElement('span');
        title.className = 'habit-title';
        title.textContent = habit.name;
        const actions = document.createElement('div');
        actions.className = 'habit-actions';
        // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å
        const editBtn = document.createElement('button');
        editBtn.title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
        editBtn.innerHTML = '‚úèÔ∏è';
        editBtn.onclick = () => openModal(true, habit);
        const delBtn = document.createElement('button');
        delBtn.title = '–£–¥–∞–ª–∏—Ç—å';
        delBtn.innerHTML = 'üóëÔ∏è';
        delBtn.onclick = () => deleteHabit(habit.id);
        actions.appendChild(editBtn);
        actions.appendChild(delBtn);
        header.appendChild(title);
        header.appendChild(actions);
        li.appendChild(header);
        // –ö–∞–ª–µ–Ω–¥–∞—Ä—å
        const calendar = renderCalendar(habit);
        li.appendChild(calendar);
        habitsList.appendChild(li);
    });
}

function renderCalendar(habit) {
    const calendar = document.createElement('div');
    calendar.className = 'calendar';
    const today = getToday();
    const year = today.getFullYear();
    const month = today.getMonth();
    // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    const firstDay = new Date(year, month, 1);
    const startDay = firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1; // –ü–Ω=0
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ 1-–≥–æ —á–∏—Å–ª–∞
    for (let i = 0; i < startDay; i++) {
        const empty = document.createElement('div');
        empty.className = 'calendar-day inactive';
        calendar.appendChild(empty);
    }
    // –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(year, month, day);
        const dayDiv = document.createElement('div');
        dayDiv.className = 'calendar-day';
        if (sameDay(date, today)) dayDiv.classList.add('today');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
        const completed = habit.completedDays && habit.completedDays.includes(date.toISOString().slice(0,10));
        if (completed) dayDiv.classList.add('completed');
        dayDiv.textContent = day;
        // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –Ω–µ –±—É–¥—É—â–∏—Ö –¥–Ω–µ–π
        if (date > today) {
            dayDiv.classList.add('inactive');
        } else {
            dayDiv.onclick = () => toggleHabitDay(habit.id, date);
        }
        calendar.appendChild(dayDiv);
    }
    return calendar;
}

// --- –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫ ---
function addHabit(name) {
    habits.push({
        id: generateId(),
        name,
        completedDays: []
    });
    saveHabits();
    renderHabits();
}

function updateHabit(id, name) {
    const habit = habits.find(h => h.id === id);
    if (habit) {
        habit.name = name;
        saveHabits();
        renderHabits();
    }
}

function deleteHabit(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É?')) {
        habits = habits.filter(h => h.id !== id);
        saveHabits();
        renderHabits();
    }
}

function toggleHabitDay(habitId, date) {
    const habit = habits.find(h => h.id === habitId);
    if (!habit) return;
    const dateStr = date.toISOString().slice(0,10);
    if (!habit.completedDays) habit.completedDays = [];
    const idx = habit.completedDays.indexOf(dateStr);
    if (idx === -1) {
        habit.completedDays.push(dateStr);
    } else {
        habit.completedDays.splice(idx, 1);
    }
    saveHabits();
    renderHabits();
}

// --- –°–æ–±—ã—Ç–∏—è ---
addHabitBtn.onclick = () => openModal();
closeModalBtn.onclick = closeModal;
habitModal.onclick = (e) => { if (e.target === habitModal) closeModal(); };
habitForm.onsubmit = function(e) {
    e.preventDefault();
    const name = habitNameInput.value.trim();
    const id = habitIdInput.value;
    if (!name) return;
    if (id) {
        updateHabit(id, name);
    } else {
        addHabit(name);
    }
    closeModal();
};

document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') closeModal();
});

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
loadHabits();
renderHabits(); 